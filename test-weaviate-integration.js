const weaviate = require('weaviate-client');

async function testWeaviateConnection() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Weaviate...');
  
  try {
    const client = await weaviate.connectToLocal();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const isReady = await client.isReady();
    console.log('‚úÖ Weaviate –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìä –ì–æ—Ç–æ–≤: ${isReady}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const collections = await client.collections.listAll();
    console.log(`üìö –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: ${collections.map(c => c.name).join(', ') || '–ù–µ—Ç'}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const isUsingOpenAI = process.env.IS_USING_OPENAI_EMBEDDINGS === '1';
    console.log(`ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ OpenAI embeddings: ${isUsingOpenAI ? '–î–∞' : '–ù–µ—Ç'}`);

    console.log('\nüéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Weaviate –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    client.close();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Weaviate:', error.message);
    process.exit(1);
  }
}

testWeaviateConnection();