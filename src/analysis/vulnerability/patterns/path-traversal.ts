import { BaseVulnerabilityPattern, VulnerabilityMatch } from './base-pattern';

export class PathTraversalPattern extends BaseVulnerabilityPattern {
  readonly id = 'PATH_TRAVERSAL';
  readonly name = 'Path Traversal';
  readonly description =
    'Обнаружена потенциальная уязвимость Path Traversal - небезопасная работа с путями файлов';
  readonly severity = 'HIGH' as const;
  readonly cwe = 'CWE-22';
  readonly languages = ['typescript', 'javascript', 'python', 'java', 'go'];

  detect(code: string): VulnerabilityMatch[] {
    const matches: VulnerabilityMatch[] = [];
    const lines = code.split(/\r?\n/);

    // Паттерны для Path Traversal
    const pathTraversalPatterns = [
      // Прямое использование пользовательского ввода в путях
      {
        regex: /fs\.readFile\s*\(\s*[^,)]*req\./gi,
        message: 'Прямое использование request параметров в fs.readFile',
        recommendation:
          'Валидируйте и санитизируйте пути, используйте path.join и проверяйте выход за границы',
      },
      {
        regex: /fs\.writeFile\s*\(\s*[^,)]*req\./gi,
        message: 'Прямое использование request параметров в fs.writeFile',
        recommendation:
          'Валидируйте и санитизируйте пути, используйте path.join и проверяйте выход за границы',
      },
      {
        regex: /open\s*\(\s*[^,)]*request\./gi,
        message: 'Прямое использование request параметров в open()',
        recommendation:
          'Валидируйте и санитизируйте пути, используйте os.path.join',
      },
      // Опасные символы в путях
      {
        regex: /\.\.\//gi,
        message: 'Обнаружены символы ../ в пути',
        recommendation:
          'Проверьте что путь не содержит ../ и не выходит за границы рабочей директории',
      },
      {
        regex: /\.\.\\/gi,
        message: 'Обнаружены символы ..\\ в пути (Windows)',
        recommendation:
          'Проверьте что путь не содержит ..\\ и не выходит за границы рабочей директории',
      },
      // Небезопасные методы работы с путями
      {
        regex: /path\.join\s*\(\s*[^,)]*req\./gi,
        message: 'Использование path.join с request параметрами без валидации',
        recommendation:
          'Валидируйте параметры перед использованием в path.join',
      },
      {
        regex: /os\.path\.join\s*\(\s*[^,)]*request\./gi,
        message:
          'Использование os.path.join с request параметрами без валидации',
        recommendation:
          'Валидируйте параметры перед использованием в os.path.join',
      },
      // Java специфичные паттерны
      {
        regex: /new\s+File\s*\(\s*[^,)]*request\./gi,
        message: 'Создание File с request параметрами',
        recommendation: 'Валидируйте пути и используйте Path.normalize()',
      },
      {
        regex: /Files\.read\s*\(\s*[^,)]*request\./gi,
        message: 'Files.read с request параметрами',
        recommendation: 'Валидируйте пути перед использованием Files.read',
      },
    ];

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];

      for (const pattern of pathTraversalPatterns) {
        const match = line.match(pattern.regex);
        if (match) {
          const codeSnippet = this.extractCodeSnippet(code, i + 1);
          matches.push(
            this.createMatch(
              i + 1,
              i + 1,
              codeSnippet,
              pattern.message,
              pattern.recommendation,
              0.7,
            ),
          );
        }
      }
    }

    return matches;
  }
}
