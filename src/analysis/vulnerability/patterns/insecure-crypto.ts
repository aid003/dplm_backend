import { BaseVulnerabilityPattern, VulnerabilityMatch } from './base-pattern';

export class InsecureCryptoPattern extends BaseVulnerabilityPattern {
  readonly id = 'INSECURE_CRYPTO';
  readonly name = 'Insecure Cryptography';
  readonly description = 'Обнаружено использование небезопасных криптографических алгоритмов или методов';
  readonly severity = 'HIGH' as const;
  readonly cwe = 'CWE-327';
  readonly languages = ['typescript', 'javascript', 'python', 'java', 'go'];

  detect(code: string): VulnerabilityMatch[] {
    const matches: VulnerabilityMatch[] = [];
    const lines = code.split(/\r?\n/);

    // Паттерны для небезопасной криптографии
    const cryptoPatterns = [
      // Устаревшие хеш-функции
      {
        regex: /md5\s*\(/gi,
        message: 'Использование MD5 - устаревший и небезопасный алгоритм',
        recommendation: 'Используйте SHA-256 или более современные алгоритмы',
      },
      {
        regex: /sha1\s*\(/gi,
        message: 'Использование SHA-1 - устаревший алгоритм',
        recommendation: 'Используйте SHA-256 или более современные алгоритмы',
      },
      {
        regex: /crypto\.createHash\s*\(\s*['"`]md5['"`]/gi,
        message: 'Создание MD5 хеша',
        recommendation: 'Используйте SHA-256 или более современные алгоритмы',
      },
      {
        regex: /crypto\.createHash\s*\(\s*['"`]sha1['"`]/gi,
        message: 'Создание SHA-1 хеша',
        recommendation: 'Используйте SHA-256 или более современные алгоритмы',
      },
      // Небезопасные алгоритмы шифрования
      {
        regex: /des\s*\(/gi,
        message: 'Использование DES - небезопасный алгоритм шифрования',
        recommendation: 'Используйте AES-256 или более современные алгоритмы',
      },
      {
        regex: /rc4\s*\(/gi,
        message: 'Использование RC4 - небезопасный алгоритм шифрования',
        recommendation: 'Используйте AES-256 или более современные алгоритмы',
      },
      {
        regex: /crypto\.createCipher\s*\(\s*['"`]des['"`]/gi,
        message: 'Создание DES шифра',
        recommendation: 'Используйте AES-256 или более современные алгоритмы',
      },
      // Слабые ключи
      {
        regex: /key\s*[:=]\s*['"`][^'"`]{1,7}['"`]/gi,
        message: 'Потенциально слабый ключ шифрования (менее 8 символов)',
        recommendation: 'Используйте ключи длиной не менее 32 символов',
      },
      // Небезопасная генерация случайных чисел
      {
        regex: /Math\.random\s*\(\s*\)/gi,
        message: 'Использование Math.random() для криптографических целей',
        recommendation: 'Используйте crypto.randomBytes() или аналогичные криптографически стойкие генераторы',
      },
      {
        regex: /random\.random\s*\(\s*\)/gi,
        message: 'Использование random.random() для криптографических целей',
        recommendation: 'Используйте os.urandom() или secrets модуль',
      },
      // Небезопасные режимы работы
      {
        regex: /crypto\.createCipher\s*\(\s*['"`]aes['"`]/gi,
        message: 'Использование устаревшего createCipher',
        recommendation: 'Используйте createCipherGCM или createCipheriv с безопасными режимами',
      },
      // Python специфичные паттерны
      {
        regex: /hashlib\.md5\s*\(/gi,
        message: 'Использование MD5 в hashlib',
        recommendation: 'Используйте hashlib.sha256() или более современные алгоритмы',
      },
      {
        regex: /hashlib\.sha1\s*\(/gi,
        message: 'Использование SHA-1 в hashlib',
        recommendation: 'Используйте hashlib.sha256() или более современные алгоритмы',
      },
      // Java специфичные паттерны
      {
        regex: /MessageDigest\.getInstance\s*\(\s*['"`]MD5['"`]/gi,
        message: 'Использование MD5 в MessageDigest',
        recommendation: 'Используйте SHA-256 или более современные алгоритмы',
      },
      {
        regex: /MessageDigest\.getInstance\s*\(\s*['"`]SHA-1['"`]/gi,
        message: 'Использование SHA-1 в MessageDigest',
        recommendation: 'Используйте SHA-256 или более современные алгоритмы',
      },
    ];

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      
      for (const pattern of cryptoPatterns) {
        const match = line.match(pattern.regex);
        if (match) {
          const codeSnippet = this.extractCodeSnippet(code, i + 1);
          matches.push(this.createMatch(
            i + 1,
            i + 1,
            codeSnippet,
            pattern.message,
            pattern.recommendation,
            0.8
          ));
        }
      }
    }

    return matches;
  }
}
