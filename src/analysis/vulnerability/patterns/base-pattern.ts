export interface VulnerabilityPattern {
  id: string;
  name: string;
  description: string;
  severity: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW' | 'INFO';
  cwe?: string;
  languages: string[];
  detect: (code: string, filePath?: string) => VulnerabilityMatch[];
}

export interface VulnerabilityMatch {
  lineStart: number;
  lineEnd: number;
  codeSnippet: string;
  message: string;
  recommendation: string;
  confidence: number; // 0-1
}

export abstract class BaseVulnerabilityPattern implements VulnerabilityPattern {
  abstract readonly id: string;
  abstract readonly name: string;
  abstract readonly description: string;
  abstract readonly severity: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW' | 'INFO';
  abstract readonly cwe?: string;
  abstract readonly languages: string[];

  abstract detect(code: string, filePath?: string): VulnerabilityMatch[];

  protected extractCodeSnippet(code: string, lineNumber: number, contextLines: number = 2): string {
    const lines = code.split(/\r?\n/);
    const start = Math.max(0, lineNumber - contextLines - 1);
    const end = Math.min(lines.length, lineNumber + contextLines);
    return lines.slice(start, end).join('\n');
  }

  protected getLineNumber(code: string, matchIndex: number): number {
    return code.substring(0, matchIndex).split(/\r?\n/).length;
  }

  protected createMatch(
    lineStart: number,
    lineEnd: number,
    codeSnippet: string,
    message: string,
    recommendation: string,
    confidence: number = 0.8
  ): VulnerabilityMatch {
    return {
      lineStart,
      lineEnd,
      codeSnippet,
      message,
      recommendation,
      confidence,
    };
  }
}
