import { BaseVulnerabilityPattern } from './base-pattern';
import type { VulnerabilityMatch } from './base-pattern';

export class HardcodedSecretsGoPattern extends BaseVulnerabilityPattern {
  id = 'go-hardcoded-secrets';
  name = 'Hardcoded Secrets in Go';
  description = 'Обнаруживает захардкоженные секреты в Go коде';
  severity = 'HIGH' as const;
  cwe = 'CWE-798';
  languages = ['go'];

  detect(content: string, filePath: string): VulnerabilityMatch[] {
    const vulnerabilities: VulnerabilityMatch[] = [];
    const lines = content.split('\n');

    // Паттерны для поиска захардкоженных секретов
    const secretPatterns = [
      // API ключи
      {
        regex: /(?:api[_-]?key|apikey|access[_-]?key)\s*[:=]\s*["']([^"']{20,})["']/gi,
        message: 'Обнаружен захардкоженный API ключ',
      },
      // Токены
      {
        regex: /(?:token|bearer|jwt)\s*[:=]\s*["']([^"']{20,})["']/gi,
        message: 'Обнаружен захардкоженный токен',
      },
      // Пароли
      {
        regex: /(?:password|passwd|pwd)\s*[:=]\s*["']([^"']{8,})["']/gi,
        message: 'Обнаружен захардкоженный пароль',
      },
      // Секретные ключи
      {
        regex: /(?:secret|private[_-]?key|secret[_-]?key)\s*[:=]\s*["']([^"']{20,})["']/gi,
        message: 'Обнаружен захардкоженный секретный ключ',
      },
      // Database URLs с паролями
      {
        regex: /(?:database|db)[_-]?(?:url|uri|connection)\s*[:=]\s*["']([^"']*:\/\/[^"']*:[^"']*@[^"']*)["']/gi,
        message: 'Обнаружен URL базы данных с захардкоженными учетными данными',
      },
    ];

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const lineNumber = i + 1;

      for (const pattern of secretPatterns) {
        let match;
        while ((match = pattern.regex.exec(line)) !== null) {
          // Проверяем, что это не комментарий
          if (this.isInComment(line, match.index)) {
            continue;
          }

          vulnerabilities.push({
            lineStart: lineNumber,
            lineEnd: lineNumber,
            codeSnippet: line.trim(),
            message: pattern.message,
            recommendation: 'Используйте переменные окружения или конфигурационные файлы для хранения секретов',
            confidence: 0.8,
          });
        }
      }
    }

    return vulnerabilities;
  }

  private isInComment(line: string, index: number): boolean {
    const beforeMatch = line.substring(0, index);
    return beforeMatch.includes('//') || beforeMatch.includes('/*');
  }
}

export class InsecureCryptoGoPattern extends BaseVulnerabilityPattern {
  id = 'go-insecure-crypto';
  name = 'Insecure Cryptographic Functions in Go';
  description = 'Обнаруживает использование небезопасных криптографических функций';
  severity = 'MEDIUM' as const;
  cwe = 'CWE-327';
  languages = ['go'];

  detect(content: string, filePath: string): VulnerabilityMatch[] {
    const vulnerabilities: VulnerabilityMatch[] = [];
    const lines = content.split('\n');

    // Небезопасные криптографические функции
    const insecureCryptoPatterns = [
      {
        regex: /\bmd5\s*\./gi,
        message: 'MD5 является криптографически небезопасным хеш-алгоритмом',
        suggestion: 'Используйте SHA-256 или более безопасные алгоритмы',
      },
      {
        regex: /\bsha1\s*\./gi,
        message: 'SHA-1 является криптографически небезопасным хеш-алгоритмом',
        suggestion: 'Используйте SHA-256 или более безопасные алгоритмы',
      },
      {
        regex: /\bdes\s*\./gi,
        message: 'DES является небезопасным алгоритмом шифрования',
        suggestion: 'Используйте AES или более безопасные алгоритмы',
      },
      {
        regex: /\brc4\s*\./gi,
        message: 'RC4 является небезопасным алгоритмом шифрования',
        suggestion: 'Используйте AES или более безопасные алгоритмы',
      },
      {
        regex: /\bmath\/rand\s*\./gi,
        message: 'math/rand не является криптографически безопасным генератором случайных чисел',
        suggestion: 'Используйте crypto/rand для криптографических операций',
      },
    ];

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const lineNumber = i + 1;

      for (const pattern of insecureCryptoPatterns) {
        let match;
        while ((match = pattern.regex.exec(line)) !== null) {
          vulnerabilities.push({
            lineStart: lineNumber,
            lineEnd: lineNumber,
            codeSnippet: line.trim(),
            message: pattern.message,
            recommendation: pattern.suggestion,
            confidence: 0.9,
          });
        }
      }
    }

    return vulnerabilities;
  }
}

export class SQLInjectionGoPattern extends BaseVulnerabilityPattern {
  id = 'go-sql-injection';
  name = 'SQL Injection in Go';
  description = 'Обнаруживает потенциальные SQL инъекции в Go коде';
  severity = 'HIGH' as const;
  cwe = 'CWE-89';
  languages = ['go'];

  detect(content: string, filePath: string): VulnerabilityMatch[] {
    const vulnerabilities: VulnerabilityMatch[] = [];
    const lines = content.split('\n');

    // Паттерны для поиска SQL инъекций
    const sqlInjectionPatterns = [
      {
        regex: /(?:db\.Query|db\.Exec|db\.QueryRow)\s*\(\s*["']([^"']*\$[^"']*)["']/gi,
        message: 'Потенциальная SQL инъекция: использование строковой интерполяции в SQL запросе',
        suggestion: 'Используйте подготовленные запросы (prepared statements) или параметризованные запросы',
      },
      {
        regex: /(?:db\.Query|db\.Exec|db\.QueryRow)\s*\(\s*[^)]*\+[^)]*\)/gi,
        message: 'Потенциальная SQL инъекция: конкатенация строк в SQL запросе',
        suggestion: 'Используйте подготовленные запросы (prepared statements) или параметризованные запросы',
      },
      {
        regex: /fmt\.Sprintf\s*\(\s*["']([^"']*%[sdv][^"']*)["']/gi,
        message: 'Потенциальная SQL инъекция: использование fmt.Sprintf для формирования SQL запроса',
        suggestion: 'Используйте подготовленные запросы (prepared statements) или параметризованные запросы',
      },
    ];

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const lineNumber = i + 1;

      for (const pattern of sqlInjectionPatterns) {
        let match;
        while ((match = pattern.regex.exec(line)) !== null) {
          vulnerabilities.push({
            lineStart: lineNumber,
            lineEnd: lineNumber,
            codeSnippet: line.trim(),
            message: pattern.message,
            recommendation: pattern.suggestion,
            confidence: 0.8,
          });
        }
      }
    }

    return vulnerabilities;
  }
}

export class PathTraversalGoPattern extends BaseVulnerabilityPattern {
  id = 'go-path-traversal';
  name = 'Path Traversal in Go';
  description = 'Обнаруживает потенциальные атаки path traversal в Go коде';
  severity = 'MEDIUM' as const;
  cwe = 'CWE-22';
  languages = ['go'];

  detect(content: string, filePath: string): VulnerabilityMatch[] {
    const vulnerabilities: VulnerabilityMatch[] = [];
    const lines = content.split('\n');

    // Паттерны для поиска path traversal
    const pathTraversalPatterns = [
      {
        regex: /(?:os\.Open|ioutil\.ReadFile|os\.Create)\s*\(\s*[^)]*\+[^)]*\)/gi,
        message: 'Потенциальная path traversal атака: конкатенация путей без валидации',
        suggestion: 'Валидируйте и санитизируйте пути перед использованием',
      },
      {
        regex: /(?:os\.Open|ioutil\.ReadFile|os\.Create)\s*\(\s*[^)]*\.\./gi,
        message: 'Потенциальная path traversal атака: использование ".." в пути',
        suggestion: 'Валидируйте и санитизируйте пути перед использованием',
      },
      {
        regex: /filepath\.Join\s*\(\s*[^)]*[^)]*\)/gi,
        message: 'Потенциальная path traversal атака: использование filepath.Join с пользовательским вводом',
        suggestion: 'Валидируйте и санитизируйте пути перед использованием filepath.Join',
      },
    ];

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const lineNumber = i + 1;

      for (const pattern of pathTraversalPatterns) {
        let match;
        while ((match = pattern.regex.exec(line)) !== null) {
          vulnerabilities.push({
            lineStart: lineNumber,
            lineEnd: lineNumber,
            codeSnippet: line.trim(),
            message: pattern.message,
            recommendation: pattern.suggestion,
            confidence: 0.7,
          });
        }
      }
    }

    return vulnerabilities;
  }
}

export class CommandInjectionGoPattern extends BaseVulnerabilityPattern {
  id = 'go-command-injection';
  name = 'Command Injection in Go';
  description = 'Обнаруживает потенциальные command injection атаки в Go коде';
  severity = 'HIGH' as const;
  cwe = 'CWE-78';
  languages = ['go'];

  detect(content: string, filePath: string): VulnerabilityMatch[] {
    const vulnerabilities: VulnerabilityMatch[] = [];
    const lines = content.split('\n');

    // Паттерны для поиска command injection
    const commandInjectionPatterns = [
      {
        regex: /(?:exec\.Command|os\.Exec)\s*\(\s*[^)]*\+[^)]*\)/gi,
        message: 'Потенциальная command injection атака: конкатенация команд без валидации',
        suggestion: 'Валидируйте и санитизируйте команды перед выполнением',
      },
      {
        regex: /(?:exec\.Command|os\.Exec)\s*\(\s*[^)]*fmt\.Sprintf/gi,
        message: 'Потенциальная command injection атака: использование fmt.Sprintf для формирования команды',
        suggestion: 'Валидируйте и санитизируйте команды перед выполнением',
      },
      {
        regex: /(?:exec\.Command|os\.Exec)\s*\(\s*[^)]*[^)]*\)/gi,
        message: 'Потенциальная command injection атака: выполнение команд с пользовательским вводом',
        suggestion: 'Валидируйте и санитизируйте команды перед выполнением',
      },
    ];

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const lineNumber = i + 1;

      for (const pattern of commandInjectionPatterns) {
        let match;
        while ((match = pattern.regex.exec(line)) !== null) {
          vulnerabilities.push({
            lineStart: lineNumber,
            lineEnd: lineNumber,
            codeSnippet: line.trim(),
            message: pattern.message,
            recommendation: pattern.suggestion,
            confidence: 0.8,
          });
        }
      }
    }

    return vulnerabilities;
  }
}