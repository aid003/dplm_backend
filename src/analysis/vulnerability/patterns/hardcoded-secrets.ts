import { BaseVulnerabilityPattern, VulnerabilityMatch } from './base-pattern';

export class HardcodedSecretsPattern extends BaseVulnerabilityPattern {
  readonly id = 'HARDCODED_SECRETS';
  readonly name = 'Hardcoded Secrets';
  readonly description = 'Обнаружены потенциально захардкоженные секреты (пароли, ключи, токены)';
  readonly severity = 'CRITICAL' as const;
  readonly cwe = 'CWE-798';
  readonly languages = ['typescript', 'javascript', 'python', 'java', 'go'];

  detect(code: string): VulnerabilityMatch[] {
    const matches: VulnerabilityMatch[] = [];
    const lines = code.split(/\r?\n/);

    // Паттерны для захардкоженных секретов
    const secretPatterns = [
      // Пароли
      {
        regex: /password\s*[:=]\s*['"`][^'"`]{3,}['"`]/gi,
        message: 'Потенциально захардкоженный пароль',
        recommendation: 'Используйте переменные окружения или внешние системы управления секретами',
      },
      {
        regex: /passwd\s*[:=]\s*['"`][^'"`]{3,}['"`]/gi,
        message: 'Потенциально захардкоженный пароль',
        recommendation: 'Используйте переменные окружения или внешние системы управления секретами',
      },
      // API ключи
      {
        regex: /api[_-]?key\s*[:=]\s*['"`][^'"`]{10,}['"`]/gi,
        message: 'Потенциально захардкоженный API ключ',
        recommendation: 'Используйте переменные окружения или внешние системы управления секретами',
      },
      {
        regex: /apikey\s*[:=]\s*['"`][^'"`]{10,}['"`]/gi,
        message: 'Потенциально захардкоженный API ключ',
        recommendation: 'Используйте переменные окружения или внешние системы управления секретами',
      },
      // Токены
      {
        regex: /token\s*[:=]\s*['"`][^'"`]{10,}['"`]/gi,
        message: 'Потенциально захардкоженный токен',
        recommendation: 'Используйте переменные окружения или внешние системы управления секретами',
      },
      {
        regex: /access[_-]?token\s*[:=]\s*['"`][^'"`]{10,}['"`]/gi,
        message: 'Потенциально захардкоженный access token',
        recommendation: 'Используйте переменные окружения или внешние системы управления секретами',
      },
      // Секретные ключи
      {
        regex: /secret[_-]?key\s*[:=]\s*['"`][^'"`]{10,}['"`]/gi,
        message: 'Потенциально захардкоженный секретный ключ',
        recommendation: 'Используйте переменные окружения или внешние системы управления секретами',
      },
      {
        regex: /private[_-]?key\s*[:=]\s*['"`][^'"`]{10,}['"`]/gi,
        message: 'Потенциально захардкоженный приватный ключ',
        recommendation: 'Используйте переменные окружения или внешние системы управления секретами',
      },
      // JWT секреты
      {
        regex: /jwt[_-]?secret\s*[:=]\s*['"`][^'"`]{10,}['"`]/gi,
        message: 'Потенциально захардкоженный JWT секрет',
        recommendation: 'Используйте переменные окружения или внешние системы управления секретами',
      },
      // Database credentials
      {
        regex: /db[_-]?password\s*[:=]\s*['"`][^'"`]{3,}['"`]/gi,
        message: 'Потенциально захардкоженный пароль базы данных',
        recommendation: 'Используйте переменные окружения или внешние системы управления секретами',
      },
      {
        regex: /database[_-]?password\s*[:=]\s*['"`][^'"`]{3,}['"`]/gi,
        message: 'Потенциально захардкоженный пароль базы данных',
        recommendation: 'Используйте переменные окружения или внешние системы управления секретами',
      },
      // AWS ключи
      {
        regex: /aws[_-]?access[_-]?key[_-]?id\s*[:=]\s*['"`][^'"`]{10,}['"`]/gi,
        message: 'Потенциально захардкоженный AWS Access Key ID',
        recommendation: 'Используйте переменные окружения или AWS IAM роли',
      },
      {
        regex: /aws[_-]?secret[_-]?access[_-]?key\s*[:=]\s*['"`][^'"`]{20,}['"`]/gi,
        message: 'Потенциально захардкоженный AWS Secret Access Key',
        recommendation: 'Используйте переменные окружения или AWS IAM роли',
      },
    ];

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      
      for (const pattern of secretPatterns) {
        const match = line.match(pattern.regex);
        if (match) {
          const codeSnippet = this.extractCodeSnippet(code, i + 1);
          matches.push(this.createMatch(
            i + 1,
            i + 1,
            codeSnippet,
            pattern.message,
            pattern.recommendation,
            0.9
          ));
        }
      }
    }

    return matches;
  }
}
