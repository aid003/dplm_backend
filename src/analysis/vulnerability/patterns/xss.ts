import { BaseVulnerabilityPattern, VulnerabilityMatch } from './base-pattern';

export class XssPattern extends BaseVulnerabilityPattern {
  readonly id = 'XSS';
  readonly name = 'Cross-Site Scripting (XSS)';
  readonly description =
    'Обнаружена потенциальная XSS уязвимость - пользовательский ввод выводится без экранирования';
  readonly severity = 'HIGH' as const;
  readonly cwe = 'CWE-79';
  readonly languages = ['typescript', 'javascript', 'python', 'java'];

  detect(code: string): VulnerabilityMatch[] {
    const matches: VulnerabilityMatch[] = [];
    const lines = code.split(/\r?\n/);

    // Паттерны для XSS
    const xssPatterns = [
      // Прямой вывод без экранирования
      {
        regex: /innerHTML\s*=\s*[^;]*\+/gi,
        message: 'Прямое присвоение innerHTML с конкатенацией',
        recommendation: 'Используйте textContent или экранируйте HTML',
      },
      {
        regex: /\.html\s*\(\s*[^)]*\+/gi,
        message: 'jQuery .html() с конкатенацией',
        recommendation: 'Используйте .text() или экранируйте HTML',
      },
      {
        regex: /dangerouslySetInnerHTML/gi,
        message: 'Использование dangerouslySetInnerHTML',
        recommendation:
          'Экранируйте HTML или используйте безопасные альтернативы',
      },
      // Template engines
      {
        regex: /\{\{.*\}\}/gi,
        message: 'Template interpolation без экранирования',
        recommendation:
          'Убедитесь что template engine экранирует HTML по умолчанию',
      },
      {
        regex: /\{!.*!\}/gi,
        message: 'Raw template output (без экранирования)',
        recommendation:
          'Используйте экранированный вывод или валидируйте данные',
      },
      // Python/Flask/Django
      {
        regex: /render_template_string/gi,
        message: 'Использование render_template_string',
        recommendation: 'Используйте render_template или экранируйте данные',
      },
      {
        regex: /mark_safe/gi,
        message: 'Использование mark_safe',
        recommendation:
          'Убедитесь что данные безопасны перед использованием mark_safe',
      },
      // Java/JSP
      {
        regex: /<%=.*%>/gi,
        message: 'JSP expression без экранирования',
        recommendation: 'Используйте JSTL c:out или экранируйте данные',
      },
    ];

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];

      for (const pattern of xssPatterns) {
        const match = line.match(pattern.regex);
        if (match) {
          const codeSnippet = this.extractCodeSnippet(code, i + 1);
          matches.push(
            this.createMatch(
              i + 1,
              i + 1,
              codeSnippet,
              pattern.message,
              pattern.recommendation,
              0.8,
            ),
          );
        }
      }
    }

    return matches;
  }
}
